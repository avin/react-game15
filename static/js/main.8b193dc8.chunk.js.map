{"version":3,"sources":["components/Game/ControlPanel/styles.module.scss","components/Game/styles.module.scss","components/GitHubLink/styles.module.scss","components/Game/Board/styles.module.scss","components/Game/Board/Chip/styles.module.scss","components/WinBar/styles.module.scss","redux/modules/data/actionTypes.js","redux/modules/data/reducer.js","redux/modules/data/index.js","redux/modules/index.js","redux/store.js","utils/data.js","redux/modules/data/actions.js","components/Game/ControlPanel/ControlPanel.js","components/Game/Board/Chip/Chip.js","components/Game/Board/Board.js","components/Game/Game.js","components/WinBar/WinBar.js","components/GitHubLink/GitHubLink.js","components/Root/Root.js","index.js","serviceWorker.js"],"names":["module","exports","panel","shuffleButton","game","winGame","rainbow","main","octicon","board","chip","bar","blinker","SET_CHIPS","SET_IS_WON","initialState","Immutable","positions","isWon","reducer","state","arguments","length","undefined","action","type","chips","set","value","combineReducers","data","configureStore","middleware","thunk","composedEnhancers","compose","apply","applyMiddleware","concat","createStore","rootReducer","generateWinChips","isEmptyLast","i","x","y","Math","floor","checkGameIsSolvable","puzzle","forEach","position","get","parity","gridWidth","sqrt","row","blankRow","j","winChips1","winChips2","setChips","checkIsWon","equals","shuffleChips","dispatch","getState","shuffleTask","numbers","range","shuffle","number","pop","setIsWon","ControlPanel","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","handleShuffle","props","handleMakeWin","e","preventDefault","makeWin","inherits","createClass","key","react_default","a","createElement","className","styles","onClick","onContextMenu","React","Component","connect","ownProps","Chip","handleMoveChip","_this$props","moveChip","_this$props2","style","left","top","chipValue","chipPosition","nullPosition","abs","Board","results","push","Board_Chip_Chip","renderChips","Game","classNames","defineProperty","Game_Board_Board","Game_ControlPanel_ControlPanel","WinBar","GitHubLink","href","target","rel","viewBox","version","aria-hidden","fillRule","d","Root","store","react_redux_es","components_WinBar_WinBar","components_Game_Game","GitHubLink_GitHubLink","document","querySelector","ReactDOM","render","Root_Root","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8b193dc8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"styles_panel__3tlwJ\",\"shuffleButton\":\"styles_shuffleButton__c20Wy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"styles_game__1zvgC\",\"winGame\":\"styles_winGame__ByKjP\",\"rainbow\":\"styles_rainbow__5C7KC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__mlelH\",\"octicon\":\"styles_octicon__3nJoe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"styles_board__1DbXX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chip\":\"styles_chip__1-bh1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"styles_bar__Mf98z\",\"blinker\":\"styles_blinker__1Miom\"};","export const SET_CHIPS = 'app/data/SET_CHIPS';\nexport const SET_IS_WON = 'app/data/SET_IS_WON';\n","import * as Immutable from 'immutable';\nimport { SET_CHIPS, SET_IS_WON } from './actionTypes';\n\nconst initialState = new Immutable.Map({\n    positions: [],\n    isWon: false,\n});\n\nexport default function reducer(state = initialState, action = {}) {\n    switch (action.type) {\n        case SET_CHIPS: {\n            const { chips } = action;\n            return state.set('chips', chips);\n        }\n        case SET_IS_WON: {\n            const { value } = action;\n            return state.set('isWon', value);\n        }\n\n        default:\n            return state;\n    }\n}\n","import reducer from './reducer';\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport data from './data';\n\nexport default combineReducers({\n    data,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './modules';\n\nconst configureStore = () => {\n    const initialState = {};\n    const enhancers = [];\n    const middleware = [thunk];\n\n    if (process.env.NODE_ENV !== 'production') {\n        const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__;\n\n        if (typeof devToolsExtension === 'function') {\n            enhancers.push(devToolsExtension());\n        }\n    }\n\n    const composedEnhancers = compose(applyMiddleware(...middleware), ...enhancers);\n\n    const store = createStore(rootReducer, initialState, composedEnhancers);\n\n    if (process.env.NODE_ENV !== 'production') {\n        if (module.hot) {\n            module.hot.accept('./modules', () => {\n                store.replaceReducer(rootReducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","import * as Immutable from 'immutable';\n\n/**\n * Сгенерировать набор фишек выйгрышной комбинации\n * @param isEmptyLast - пустая клетка последняя\n */\nexport function generateWinChips(isEmptyLast) {\n    let chips = Immutable.Map({});\n    if (isEmptyLast) {\n        for (let i = 0; i < 15; i += 1) {\n            chips = chips.set(i + 1, new Immutable.Map({ x: i % 4, y: Math.floor(i / 4) }));\n        }\n        chips = chips.set(0, new Immutable.Map({ x: 3, y: 3 }));\n    } else {\n        for (let i = 0; i < 16; i += 1) {\n            chips = chips.set(i, new Immutable.Map({ x: i % 4, y: Math.floor(i / 4) }));\n        }\n    }\n\n    return chips;\n}\n\n/**\n * Проверка что положение фишек позволяет пройти игру до конца\n * @param chips\n *\n * @description Алгоритм взят отсюда https://www.cs.bham.ac.uk/~mdr/teaching/modules04/java2/TilesSolvability.html\n */\n// eslint-disable-next-line sonarjs/cognitive-complexity\nexport function checkGameIsSolvable(chips) {\n    const puzzle = [];\n    chips.forEach((position, value) => {\n        if (!puzzle[position.get('y')]) {\n            puzzle[position.get('y')] = [];\n        }\n        puzzle[position.get('y') * 4 + position.get('x')] = value;\n    });\n\n    let parity = 0;\n    const gridWidth = Math.sqrt(puzzle.length);\n\n    let row = 0; // the current row we are on\n    let blankRow = 0; // the row with the blank tile\n\n    for (let i = 0; i < puzzle.length; i += 1) {\n        if (i % gridWidth === 0) {\n            // advance to next row\n            row += 1;\n        }\n        if (puzzle[i] === 0) {\n            // the blank tile\n            blankRow = row;\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n        for (let j = i + 1; j < puzzle.length; j += 1) {\n            if (puzzle[i] > puzzle[j] && puzzle[j] !== 0) {\n                parity += 1;\n            }\n        }\n    }\n\n    if (gridWidth % 2 === 0) {\n        if (blankRow % 2 === 0) {\n            return parity % 2 === 0;\n        }\n\n        return parity % 2 !== 0;\n    }\n\n    return parity % 2 === 0;\n}\n","import range from 'lodash/range';\nimport shuffle from 'lodash/shuffle';\nimport * as Immutable from 'immutable';\nimport { SET_CHIPS, SET_IS_WON } from './actionTypes';\nimport { checkGameIsSolvable, generateWinChips } from '../../../utils/data';\n\nconst winChips1 = generateWinChips();\nconst winChips2 = generateWinChips(true);\n\n/**\n * Выставить положения фишек\n * @param chips\n */\nexport function setChips(chips) {\n    return {\n        type: SET_CHIPS,\n        chips,\n    };\n}\n\n/**\n * Проверить не победа ли?\n * @param chips\n */\nexport function checkIsWon(chips) {\n    return !!(chips.equals(winChips1) || chips.equals(winChips2));\n}\n\n/**\n * Перемешать фишки\n */\nexport function shuffleChips() {\n    return (dispatch, getState) => {\n        const shuffleTask = () => {\n            let chips = new Immutable.Map();\n\n            let numbers = range(0, 16);\n            numbers = shuffle(numbers);\n\n            for (let y = 0; y < 4; y += 1) {\n                for (let x = 0; x < 4; x += 1) {\n                    const number = numbers.pop();\n                    chips = chips.set(number, new Immutable.Map({ x, y }));\n                }\n            }\n\n            return chips;\n        };\n\n        let chips;\n        do {\n            chips = shuffleTask();\n        } while (checkIsWon(chips) || !checkGameIsSolvable(chips));\n\n        dispatch(setChips(chips));\n        dispatch(setIsWon(false));\n    };\n}\n\n/**\n * Передвинуть фишку с номиналом\n * @param chipValue\n */\nexport function moveChip(chipValue) {\n    return (dispatch, getState) => {\n        let chips = getState().data.get('chips');\n\n        const chipPosition = chips.get(chipValue);\n        const nullPosition = chips.get(0);\n\n        // Определяем соседствует ли фишка к пустой ячейкой\n        if (\n            (Math.abs(nullPosition.get('x') - chipPosition.get('x')) === 1 &&\n                nullPosition.get('y') === chipPosition.get('y')) ||\n            (Math.abs(nullPosition.get('y') - chipPosition.get('y')) === 1 &&\n                nullPosition.get('x') === chipPosition.get('x'))\n        ) {\n            // Если это так - меняем положение фишки и пустой клетки\n            chips = chips.set(0, chipPosition).set(chipValue, nullPosition);\n            dispatch(setChips(chips));\n        }\n\n        // Определяем не завершилась ли игра победой?\n        dispatch(setIsWon(checkIsWon(chips)));\n    };\n}\n\n/**\n * Выставить флаг победы\n * @param value\n */\nexport function setIsWon(value) {\n    return {\n        type: SET_IS_WON,\n        value,\n    };\n}\n\n/**\n * Читерская функция генерирующая подебу\n * @returns {Function}\n */\nexport function makeWin() {\n    return (dispatch, getState) => {\n        const chips = generateWinChips(true);\n        dispatch(setChips(chips));\n        dispatch(setIsWon(true));\n    };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeWin, shuffleChips } from '../../../redux/modules/data/actions';\nimport styles from './styles.module.scss';\n\nexport class ControlPanel extends React.Component {\n    handleShuffle = () => {\n        const { shuffleChips } = this.props;\n        shuffleChips();\n    };\n\n    handleMakeWin = e => {\n        e.preventDefault();\n        const { makeWin } = this.props;\n        makeWin();\n    };\n\n    render() {\n        return (\n            <div className={styles.panel}>\n                <button\n                    onClick={this.handleShuffle}\n                    onContextMenu={this.handleMakeWin}\n                    className={styles.shuffleButton}\n                >\n                    Shuffle\n                </button>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {};\n}\n\nexport default connect(mapStateToProps, {\n    shuffleChips,\n    makeWin,\n})(ControlPanel);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport styles from './styles.module.scss';\nimport { moveChip } from '../../../../redux/modules/data/actions';\n\nexport class Chip extends React.Component {\n    static propTypes = {\n        value: PropTypes.number,\n        x: PropTypes.number,\n        y: PropTypes.number,\n    };\n\n    handleMoveChip = () => {\n        const { moveChip, value } = this.props;\n        moveChip(value);\n    };\n\n    render() {\n        const { value, x, y } = this.props;\n        return (\n            <div className={styles.chip} style={{ left: 5 + x * 55, top: 5 + y * 55 }} onClick={this.handleMoveChip}>\n                {value}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {};\n}\n\nexport default connect(mapStateToProps, {\n    moveChip,\n})(Chip);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.scss';\nimport Chip from './Chip/Chip';\n\nexport class Board extends React.Component {\n    renderChips() {\n        const { chips } = this.props;\n\n        const results = [];\n\n        chips.forEach((position, value) => {\n            if (value !== 0) {\n                results.push(<Chip key={value} value={value} x={position.get('x')} y={position.get('y')} />);\n            }\n        });\n\n        return results;\n    }\n\n    render() {\n        return <div className={styles.board}>{this.renderChips()}</div>;\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        chips: state.data.get('chips'),\n    };\n}\n\nexport default connect(mapStateToProps, {})(Board);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport ControlPanel from './ControlPanel/ControlPanel';\nimport Board from './Board/Board';\nimport styles from './styles.module.scss';\n\nexport class Game extends React.Component {\n    render() {\n        const { isWon } = this.props;\n        return (\n            <div className={classNames(styles.game, { [styles.winGame]: isWon })}>\n                <Board />\n                <ControlPanel />\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        isWon: state.data.get('isWon'),\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    {},\n)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.scss';\n\nexport class WinBar extends React.Component {\n    render() {\n        const { isWon } = this.props;\n\n        return <div className={styles.bar}>{isWon ? <span>YOU WON!!!</span> : <span>&nbsp;</span>}</div>;\n    }\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        isWon: state.data.get('isWon'),\n    };\n}\n\nexport default connect(mapStateToProps, {})(WinBar);\n","/* eslint-disable max-len */\nimport React from 'react';\nimport styles from './styles.module.scss';\n\nexport default class GitHubLink extends React.Component {\n    render() {\n        return (\n            <div className={styles.main}>\n                <a href=\"https://github.com/avin/react-game15\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <svg className={styles.octicon} viewBox=\"0 0 16 16\" version=\"1.1\" aria-hidden=\"true\">\n                        <path\n                            fillRule=\"evenodd\"\n                            d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z\"\n                        />\n                    </svg>\n                </a>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Game from '../Game/Game';\nimport WinBar from '../WinBar/WinBar';\nimport GitHubLink from '../GitHubLink/GitHubLink';\n\nexport default class Root extends React.Component {\n    render() {\n        const { store } = this.props;\n\n        return (\n            <Provider store={store}>\n                <div className=\"filler\" />\n                <WinBar />\n                <Game />\n                <div className=\"filler-2\" />\n                <GitHubLink />\n            </Provider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport configureStore from './redux/store';\nimport Root from './components/Root/Root';\nimport './styles/index.scss';\nimport { shuffleChips } from './redux/modules/data/actions';\nimport * as serviceWorker from './serviceWorker';\n\n// Инициализирует redux-store\nconst store = configureStore();\n\n// Сразу гененрируем координаты фишек\nstore.dispatch(shuffleChips());\n\n// Монтируем React контейнер на страницу\nconst target = document.querySelector('#root');\nReactDOM.render(<Root store={store} />, target);\n\nif (module.hot) {\n    module.hot.accept('./components/Root/Root', () => {\n        ReactDOM.render(<Root store={store} />, target);\n    });\n}\n\nserviceWorker.unregister();\n","export function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n"],"sourceRoot":""}